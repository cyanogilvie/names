.\" Automatically generated by Pandoc 2.9.2.1
.\"
.TH "names" "n" "0.1" "0.1" "Name generator"
.hy
.SH NAME
.PP
names - Name generator
.SH SYNOPSIS
.PP
\f[B]package require names\f[R] ?0.1?
.PP
\f[B]names gen\f[R] ?\f[I]seq\f[R]?
.PP
\f[B]names gen_unique\f[R] ?\f[I]seq\f[R]?
.PP
\f[B]names name\f[R] \f[I]thing\f[R] ?\f[I]seq\f[R]?
.PP
\f[B]names thing\f[R] \f[I]name\f[R]
.SH DESCRIPTION
.PP
This module provides automatic naming facilities designed to be
compatible with human perception and memory.
Often in software we have opaque handles for things or addresses in
memory: thread ids, process ids, file handles, object instances, etc.
These are often similar to each other and hard to remember, visually
match and contrast.
This module provides a way to map such things to memorable and easy to
match names by assigning a CamelCased combination of an adjective and a
noun, picked at random from a list of the most common adjectives and
nouns (minimally modified to be SFW), and optionally maintains a map
from the generated names to the original things and back.
.SH COMMANDS
.TP
\f[B]names gen\f[R] ?\f[I]seq\f[R]?
Generate and return a name, using \f[I]seq\f[R] for the random numbers
(a sequence as implemented by the \f[B]prng\f[R] module).
If \f[I]seq\f[R] isn\[cq]t supplied, a default sequence is used which is
seeded with a random number.
.TP
\f[B]names gen_unique\f[R] ?\f[I]seq\f[R]?
Generate and return a unique name.
The name will not have been used by any thread in the current process.
The optional \f[I]seq\f[R] arg as per the description of \f[B]names
gen\f[R].
.TP
\f[B]names name\f[R] \f[I]thing\f[R] ?\f[I]seq\f[R]?
Return the name allocated for \f[I]thing\f[R], generating it if it
didn\[cq]t exist yet.
The returned name uniquely refers to \f[I]thing\f[R] and won\[cq]t have
been previously used by any thread in the current process to refer to a
different \f[I]thing\f[R].
\f[I]seq\f[R] as for \f[B]names gen\f[R].
.TP
\f[B]names thing\f[R] \f[I]name\f[R]
Return the \f[I]thing\f[R] which was allocated the name \f[I]name\f[R]
(possibly by another thread)
.SH SEQUENCES
.PP
The commands that require random number input take an optional
\f[I]seq\f[R] argument, which allows control over the random numbers
supplied, allowing programs to always assign the same names to things,
provided the names are generated in a deterministic sequence.
This can be helpful when debugging, to maintain name consistency across
runs.
.SH EXAMPLES
.PP
Generate 3 random names:
.IP
.nf
\f[C]
package require names

puts [names gen]
puts [names gen]
puts [names gen]
\f[R]
.fi
.PP
produces output like:
.IP
.nf
\f[C]
BrightFamily
SuccessfulJump
AutomaticCake
\f[R]
.fi
.PP
Generate the same sequence of names for each run:
.IP
.nf
\f[C]
package require names
package require prng::mt

prng::mt::Sequence create nameseq \[dq]hello, names\[dq]
puts [names gen nameseq]
puts [names gen nameseq]
puts [names gen nameseq]
\f[R]
.fi
.PP
produces the output:
.IP
.nf
\f[C]
MuchDeath
HumanEquivalent
PrizeBell
\f[R]
.fi
.PP
Automatically assign friendly names for thread ids in log messages:
.IP
.nf
\f[C]
package require names
package require Thread

proc threadlog {tid msg} {
    global threads
    set name   [names name $tid] 
    puts \[dq]$name: $msg\[dq]
    set idx     [lsearch -exact $threads [names thing $name]]
    set threads [lreplace $threads $idx $idx]
}

set initscript [string map [list %tid% [thread::id]] {
    proc log msg {
        thread::send -async %tid% [list threadlog [thread::id] $msg]
    }
    thread::wait
}]

set threads {}
lappend threads [thread::create $initscript]
lappend threads [thread::create $initscript]
lappend threads [thread::create $initscript]

foreach tid $threads msg {foo bar baz} {
    thread::send -async $tid [list log $msg]
}

while {[llength $threads]} {
    vwait threads
}
\f[R]
.fi
.PP
produces output like:
.IP
.nf
\f[C]
SoftHouse: foo
NearbySystem: bar
AfterVariation: baz
\f[R]
.fi
.SH LICENCE
.PP
This package Copyright 2013-2022 Cyan Ogilvie, and is made available
under the same license terms as the Tcl Core.
.SH AUTHORS
Cyan Ogilvie.
